# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  node: circleci/node@4.7.0
  heroku: circleci/heroku@1.2.2
  browser-tools: circleci/browser-tools@1.1.3
  gh: circleci/github-cli@2.1.0

executors:
  slds-executor:
    docker:
      - image: cimg/node:lts

commands:
  build-tokens:
    description: 'Build tokens'
    steps:
      - run:
          name: 'Build Tokens'
          command: 'npm run gulp -- generate:tokens:all'

  copy-tokens-to-workspace:
    description: 'Copy design-tokens to workspace'
    steps:
      - run:
          name: 'Compress design-tokens'
          command: 'tar -cvf workspace/design-tokens.tar design-tokens/'

  copy-tokens-from-workspace:
    description: 'Copy design-tokens from workspace'
    steps:
      - run:
          name: 'Decompress design-tokens'
          command: 'tar -xvf workspace/design-tokens.tar'

  set-github-pr-number:
    description: 'Set Github pull-request number environment variable'
    steps:
      - run: echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV

  set-heroku-app-name:
    description: 'Set Heroku app name environment variable'
    steps:
      - set-github-pr-number
      # if on default branch without a tag
      #   then publish to UPCOMING
      #
      # if on default branch and tag of X.X.X-*
      #   then publish to CORE-MAIN
      #
      # if on any branch and tag of X.X.X
      #   then publish to CORE-PATCH
      #
      # All other cases publish to the review app
      - run:
          name: Set which app to deploy to on Heroku
          command: |
            export CURRENT_DEFAULT_BRANCH=`git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs`
            echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=false' >> $BASH_ENV
            if [[ "${CIRCLE_BRANCH}" = "${CURRENT_DEFAULT_BRANCH}" ]] ; then
              echo "Publishing to UPCOMING..."
              echo 'export HEROKU_APP_NAME=${HEROKU_APP_UPCOMING}' >> $BASH_ENV
              echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=storybook-upcoming' >> $BASH_ENV
            elif [[ ${CIRCLE_TAG} =~ ^v[0-9]+\.[0-9]+\.[0-9]+-.+$ ]] ; then
              echo "Publishing to CORE-MAIN..."
              echo 'export HEROKU_APP_NAME=${HEROKU_APP_CORE_MAIN}' >> $BASH_ENV
              echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=storybook-core-main' >> $BASH_ENV
            elif [[ ${CIRCLE_TAG} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
              echo "Publishing to CORE-PATCH..."
              echo 'export HEROKU_APP_NAME=${HEROKU_APP_CORE_PATCH}' >> $BASH_ENV
              echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=storybook-core-patch' >> $BASH_ENV
            else
              echo "Publishing to pull-request review app..."
              echo 'export HEROKU_APP_NAME=slds-review-site-pr-${PR_NUMBER}' >> $BASH_ENV
              echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=true' >> $BASH_ENV
            fi
            source $BASH_ENV
            echo $HEROKU_APP_NAME > workspace/heroku-app-name.txt
            echo $HEROKU_RELEASE_STORYBOOK_APP_NAME > workspace/heroku-release-storybook-app-name.txt
      - run: printenv | sort

      - run:
          name: Show HEROKU_APP_NAME value
          command: |
            echo "gh-pr-num.txt = $(cat workspace/gh-pr-num.txt)"
            echo
            echo "PR_NUMBER = ${PR_NUMBER}"
            echo
            echo "=============================="
            cat workspace/heroku-app-name.txt
            echo "=============================="
            echo
  get-pr-number:
    description: 'Get Github pull-request number'
    steps:
      - run:
          name: Get Github pull-request number
          command: |
            set +e
            gh pr view --json number,state,title,url > gh-pull-data.json
            for ((x=0 ; x<5 ; x++)) ; do
              if [ -z $(cat gh-pull-data.json | jq -r '.number') ] ; then
                gh pr view --json number,state,title,url > gh-pull-data.json
              else
                echo "» Pull-request #"$(cat gh-pull-data.json | jq -r '.number')
                break
              fi
            done
            echo
            echo "=== Github pull-request API results ==="
            cat gh-pull-data.json
            echo "---------------------------------------"
            cat gh-pull-data.json | jq -r '.number' > workspace/gh-pr-num.txt && cat workspace/gh-pr-num.txt
      - run:
          name: Verify Github pull-request number
          command: |
            echo "» Branch: "${CIRCLE_BRANCH}
            echo
            if [[ ${CIRCLE_BRANCH} =~ ^[0-9]{3}-(summer|spring|winter)-[0-9]{2}$ || -n ${CIRCLE_TAG} ]] ; then
              echo "» Does not require a pull-request number"
            else
              if [ -z $(cat workspace/gh-pr-num.txt) ] ; then
                echo "» No pull-request number found!"
                echo "» Please try running this CI workflow again."
                exit 1
              fi
            fi
jobs:
  # Init bits & bobs subsequent jobs require
  init:
    executor: slds-executor
    resource_class: small

    steps:
      - checkout
      - run: mkdir -p workspace
      - gh/install
      - get-pr-number

      - run:
          name: Retrieve Github deployments
          command: |
            gh api /repos/salesforce-ux/design-system-internal/deployments --field ref=${CIRCLE_SHA1} --method GET | jq "map({ status: .statuses_url, url: .payload.web_url})" > workspace/gh-deployments.json
            cat workspace/gh-deployments.json
      - run:
          name: Set Github deployments to "in progress"
          command: |
            for row in $(jq -r '.[] | @base64' workspace/gh-deployments.json); do
              export STATUS_URL=$(echo ${row} | base64 --decode | jq -r ".status" | sed 's/https:\/\/api.github.com//')
              gh api ${STATUS_URL} -f state=in_progress -H "Accept: application/vnd.github.flash-preview+json"
            done
      - persist_to_workspace:
          root: workspace
          paths:
            - gh-deployments.json
            - gh-pr-num.txt

  # Build SLDS styles
  prepare:
    executor: slds-executor
    resource_class: small

    steps:
      - checkout
      - attach_workspace:
          at: workspace

      - set-heroku-app-name

      - node/install-npm
      - node/install-packages:
          # version cache here to remove conflict between this job and other concurrent jobs (init, prepare, etc).
          cache-version: standard

      # Gulp tasks (need to clean-up and not run through `npm run`)
      - build-tokens
      - copy-tokens-to-workspace

      - run:
          name: Compile styles
          command: 'npm run gulp -- styles'

      - run:
          name: 'Compress styles'
          command: 'tar -cvf workspace/styles.tar assets/styles/'

      - run:
          name: 'Compress generated metadata'
          command: 'tar -cvf workspace/metadata.tar .generated/metadata/'

      - persist_to_workspace:
          root: workspace
          paths:
            - design-tokens.tar
            - styles.tar
            - metadata.tar
            - heroku-app-name.txt
            - heroku-release-storybook-app-name.txt

  # Build SLDS .dist
  framework-build:
    executor: slds-executor
    resource_class: xlarge
    # parallelism: 4

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - copy-tokens-from-workspace

      - run:
          name: 'Decompress styles'
          command: 'tar -xvf workspace/styles.tar'

      - run:
          name: 'Decompress metadata'
          command: 'tar -xvf workspace/metadata.tar'

      - node/install-npm
      - node/install-packages:
          # version cache here to remove conflict between this job and other concurrent jobs (init, prepare, etc).
          cache-version: standard

      - run:
          name: 'Do build-dist'
          command: 'npm run build-dist'
          environment:
            NODE_OPTIONS: --openssl-legacy-provider
      ####
      - run:
          name: Compress .dist
          command: |
            tar -cvf workspace/design-system-dist.tar .dist/
            cd .dist && zip -r dist . && mv dist.zip ../workspace/ && cd ..
      - persist_to_workspace:
          root: workspace
          paths:
            - design-system-dist.tar
            - dist.zip

  # Publish artifact & trigger database update
  populate-database:
    executor: slds-executor
    resource_class: small

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - gh/install

      - run:
          name: 'Github: attach artifact to release'
          command: |
            export VERSION_FROM_TAG=$([[ ${CIRCLE_TAG} =~ ^v.* ]] && echo ${CIRCLE_TAG:1:20} || echo ${CIRCLE_TAG})
            export VERSION_FROM_PACKAGE=$(cat package.json | jq -r .version)
            gh release view v${VERSION_FROM_TAG} | grep v${VERSION_FROM_TAG}
            if [ $? -eq 0 ]; then
              cp workspace/dist.zip workspace/slds-v${VERSION_FROM_TAG}.zip
              echo "=============================="
              echo "» Attaching artifact to release v${VERSION_FROM_TAG}"
              gh release upload v${VERSION_FROM_TAG} workspace/slds-v${VERSION_FROM_TAG}.zip#"SLDS v${VERSION_FROM_TAG}" --clobber
            else
              echo "=============================="
              echo "» ERROR: release v${VERSION_FROM_TAG} not found on Github"
            fi
      - run:
          name: Trigger database update via API
          command: |
            export SALESFORCE_VERSION=$(cat package.json | jq -r .slds.id)
            curl --location --request PATCH 'https://api.lightningdesignsystem.com/v1/release' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer '"$DSE_API_RELEASE_TOKEN"'' \
            --data-raw '{
                "version":"'"$CIRCLE_TAG"'",
                "salesforce_version": "'"$SALESFORCE_VERSION"'"
            }'

workflows:
  version: 2
  CI:
    jobs:
      - init:
          context: ux-eng-keys
          filters:
            tags:
              only: /.*/
      - prepare:
          context: ux-eng-keys
          filters:
            tags:
              only: /.*/
          requires:
            - init
      - framework-build:
          context: ux-eng-keys
          requires:
            - prepare
          filters:
            tags:
              only: /.*/
      - populate-database:
          context: ux-eng-keys
          requires:
            - framework-build
          # update for all tagged versions (X.X.X[-*])
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
            branches:
              ignore: /.*/
